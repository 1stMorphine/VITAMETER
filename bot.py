
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import BufferedInputFile
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime
from dateutil.relativedelta import relativedelta
from config import BOT_TOKEN
from db import init_db, set_birth_date, get_birth_date, delete_birth_date, set_reminder, get_reminder
from scheduler import scheduler, add_reminder_job
from utils import parse_date, calculate_life_stats, format_timedelta, parse_two_dates, generate_life_chart

# --- FSM States ---
class Form(StatesGroup):
    waiting_for_birth_date = State()
    waiting_for_target_date = State()
    waiting_for_past_date = State()
    waiting_for_between_dates = State()
    waiting_for_reminder = State()

# --- Keyboards ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏")],
        [KeyboardButton(text="üóì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –î–û"), KeyboardButton(text="‚è≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü–û–°–õ–ï")],
        [KeyboardButton(text="üîÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ú–ï–ñ–î–£"), KeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="üßë‚Äçüíª GitHub"), KeyboardButton(text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")]
    ],
    resize_keyboard=True
)

# --- Bot Init ---
from core import bot, dp

# --- FSM Interrupt Handler ---
@dp.message(F.text.in_([
    "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏",
    "üóì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –î–û", "‚è≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü–û–°–õ–ï",
    "üîÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ú–ï–ñ–î–£", "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
    "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üßë‚Äçüíª GitHub", "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
]))
async def menu_interrupt(message: Message, state: FSMContext):
    await state.clear()
    if message.text == "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É":
        await set_date(message, state)
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏":
        await life_stats(message)
    elif message.text == "üóì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –î–û":
        await calc_to(message, state)
    elif message.text == "‚è≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü–û–°–õ–ï":
        await calc_after(message, state)
    elif message.text == "üîÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ú–ï–ñ–î–£":
        await calc_between(message, state)
    elif message.text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        await setup_reminder(message, state)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É":
        await delete_date(message)
    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_info(message)
    elif message.text == "üßë‚Äçüíª GitHub":
        await github_link(message)
    elif message.text == "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!":
        await cmd_start(message)

# --- Handlers ---
@dp.message(CommandStart())
@dp.message(F.text == "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vitameter ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message(F.text == "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É")
async def set_date(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await state.set_state(Form.waiting_for_birth_date)

@dp.message(Form.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    date = parse_date(message.text)
    if not date:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await set_birth_date(message.from_user.id, date)
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏–∑–Ω–∏")
async def life_stats(message: Message):
    user_id = message.from_user.id
    bdate = await get_birth_date(user_id)
    if not bdate:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É.")
    try:
        stats = calculate_life_stats(bdate)
        chart_buffer = generate_life_chart(bdate)
        chart_file = BufferedInputFile(file=chart_buffer.getvalue(), filename="life_chart.png")
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=chart_file,
            caption=f"<b>–í–∞—à–∞ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ :</b>\n{stats}",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"[–û—à–∏–±–∫–∞] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {e}")

@dp.message(F.text == "üóì –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –î–û")
async def calc_to(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await state.set_state(Form.waiting_for_target_date)

@dp.message(Form.waiting_for_target_date)
async def process_to_date(message: Message, state: FSMContext):
    date = parse_date(message.text)
    if not date:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    delta = date - datetime.now()
    await message.answer("–î–æ —ç—Ç–æ–π –¥–∞—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å:\n" + format_timedelta(delta))
    await state.clear()

@dp.message(F.text == "‚è≥ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ü–û–°–õ–ï")
async def calc_after(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await state.set_state(Form.waiting_for_past_date)

@dp.message(Form.waiting_for_past_date)
async def process_after_date(message: Message, state: FSMContext):
    date = parse_date(message.text)
    if not date or date > datetime.now():
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º.")
    delta = datetime.now() - date
    await message.answer("–° —ç—Ç–æ–π –¥–∞—Ç—ã –ø—Ä–æ—à–ª–æ:\n" + format_timedelta(delta))
    await state.clear()

@dp.message(F.text == "üîÄ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ú–ï–ñ–î–£")
async def calc_between(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì)")
    await state.set_state(Form.waiting_for_between_dates)

@dp.message(Form.waiting_for_between_dates)
async def process_between(message: Message, state: FSMContext):
    d1, d2 = parse_two_dates(message.text)
    if not d1 or not d2:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì")
    delta = abs(d2 - d1)
    await message.answer("–ú–µ–∂–¥—É —ç—Ç–∏–º–∏ –¥–∞—Ç–∞–º–∏:\n" + format_timedelta(delta))
    await state.clear()

@dp.message(F.text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def setup_reminder(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 09:00 (–ø–æ –ú–°–ö)")
    await state.set_state(Form.waiting_for_reminder)

@dp.message(Form.waiting_for_reminder)
async def process_reminder(message: Message, state: FSMContext):
    try:
        day_str, time_str = message.text.lower().split()
        day_map = {
            '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0, '–≤—Ç–æ—Ä–Ω–∏–∫': 1, '—Å—Ä–µ–¥–∞': 2,
            '—á–µ—Ç–≤–µ—Ä–≥': 3, '–ø—è—Ç–Ω–∏—Ü–∞': 4, '—Å—É–±–±–æ—Ç–∞': 5, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
        }
        hour, minute = map(int, time_str.split(":"))
        weekday = day_map[day_str]
        await set_reminder(message.from_user.id, weekday, hour, minute)
        add_reminder_job(message.from_user.id, weekday, hour, minute)
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ –ú–°–ö). –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç.")
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –≤—Ç–æ—Ä–Ω–∏–∫ 18:30")
    await state.clear()

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É")
async def delete_date(message: Message):
    await delete_birth_date(message.from_user.id)
    await message.answer("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞.")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_info(message: Message):
    await message.answer("Vitameter ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∏–∑–Ω–∏. \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n–ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –æ—Ç–ø—Ä–∞–≤—å /help –≤ —á–∞—Ç")

@dp.message(F.text == "üßë‚Äçüíª GitHub")
async def github_link(message: Message):
    await message.answer("–ü—Ä–æ–µ–∫—Ç –Ω–∞ GitHub: [VitameTer GitHub](https://github.com/YOUR_GITHUB_URL)", parse_mode="Markdown")

# --- Main Run ---
async def main():
    await init_db()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
